package libheif

import (
	"image"
	"os"
	"strings"
	"testing"
)

// List of image names
var heicAndAvifImages = []string{"images/example-from-libheif.heic", "images/example-from-libheif.avif", "images/image1-from-me.heic", "images/samsung-generated.heic"}

// It has problems with converting images to HEIC format. Couldn't convert these images:
// var pngAndJpegImages = []string{"images/apple.jpg", "images/deer.png", "images/go.png"}
// But as I found it can easily convert libheif generated images back to heic
var pngAndJpegImages = []string{"images/libheif-generated.jpeg"}

func TestHeifToJpeg(t *testing.T) {
	for _, imageName := range heicAndAvifImages {
		heifImagePath := imageName
		jpegImagePath := "test_images/" + strings.Replace(imageName, "/", "-", 1) + ".jpeg"

		err := HeifToJpeg(heifImagePath, jpegImagePath, 80)
		if err != nil {
			t.Errorf("Failed to convert HEIF to JPEG: %v", err)
		}

		// Check if the file exists
		if _, err := os.Stat(jpegImagePath); os.IsNotExist(err) {
			t.Errorf("Output JPEG file does not exist: %v", err)
		}

		// Cleanup
		t.Cleanup(func() {
			os.Remove(jpegImagePath)
		})
	}
}

func TestHeifToPng(t *testing.T) {
	for _, imageName := range heicAndAvifImages {
		heifImagePath := imageName
		pngImagePath := "test_images/" + strings.Replace(imageName, "/", "-", 1) + ".png"

		err := HeifToJpeg(heifImagePath, pngImagePath, 80)
		if err != nil {
			t.Errorf("Failed to convert HEIF to JPEG: %v", err)
		}

		// Check if the file exists
		if _, err := os.Stat(pngImagePath); os.IsNotExist(err) {
			t.Errorf("Output JPEG file does not exist: %v", err)
		}

		// Cleanup
		t.Cleanup(func() {
			os.Remove(pngImagePath)
		})
	}
}

func TestImageToHeif(t *testing.T) {
	for _, imageName := range pngAndJpegImages {
		jpegOrPngImagePath := imageName
		heifImagePath := "test_images/" + strings.Replace(imageName, "/", "-", 1) + ".heic"

		err := ImageToHeif(jpegOrPngImagePath, heifImagePath)
		if err != nil {
			t.Errorf("Failed to convert Image to HEIF: %v", err)
		}

		// Check if the file exists
		if _, err := os.Stat(heifImagePath); os.IsNotExist(err) {
			t.Errorf("Output HEIF file does not exist: %v", err)
		}

		// Cleanup
		t.Cleanup(func() {
			os.Remove(heifImagePath)
		})
	}
}

// Also it works well with images generated by Golang
func TestSaveImageAsHeif(t *testing.T) {
	// For the purpose of this test, we will create an empty image
	// with a set width and height, and save it as HEIF.
	img := image.NewRGBA(image.Rect(0, 0, 100, 100))
	format := "png"
	newHeifImagePath := "test_images/" + "go-generated-png" + ".heic"

	err := SaveImageAsHeif(img, format, newHeifImagePath)
	if err != nil {
		t.Errorf("Failed to save image as HEIF: %v", err)
	}

	// Check if the file exists
	if _, err := os.Stat(newHeifImagePath); os.IsNotExist(err) {
		t.Errorf("Output HEIF file does not exist: %v", err)
	}

	// Cleanup
	t.Cleanup(func() {
		os.Remove(newHeifImagePath)
	})
}
